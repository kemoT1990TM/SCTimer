package com.tkartas.speedcubingtimer.datamodel;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public class ScramblesAndTimes {
    private String name;
    private Times times;
    private Scrambles scrambles;

    public static String minScramble="Not enough times";
    public static String avg5Scrambles="Not enough times";
    public static String avg12Scrambles="Not enough times";

    public ScramblesAndTimes(String name) {
        this.name = name;
        this.times=new Times();
        this.scrambles=new Scrambles();
    }

    public void addRecord(String scramble, String time){
        times.addTime(time);
        scrambles.addScramble(scramble);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Times getTimes() {
        return times;
    }

    public void setTimes(Times times) {
        this.times = times;
    }

    public Scrambles getScrambles() {
        return scrambles;
    }

    public void setScrambles(Scrambles scrambles) {
        this.scrambles = scrambles;
    }

    public String printTimes(){
        return times.printTimes();
    }

    public String getScramble(int position){
        return scrambles.getScramble(position);
    }

    public String getTime(int position){
        return times.getTime(position);
    }

    public List<String> plusTwo(){
        return times.plusTwo();
    }

    public List<String> deleteLastTime(){
        return times.deleteLastTime();
    }

    public int getPositionOfTime(String time){
        return times.getPosition(time);
    }

    public int getPositionOfScramble(String scramble){
        return scrambles.getPositionForScramble(scramble);
    }

    public int getSizeOfTimes(){
        return times.getSize();
    }

    public int getSizeOfScrambles(){
        return scrambles.getSize();
    }

    public String minTime(){
        return times.minTime();
    }

    public String maxTime(){
        return times.maxTime();
    }

    public String currentAvg5(){
        return times.currentAvg5();
    }

    public String bestAvg5(){
        return times.bestAvg5();
    }
    public String currentAvg12(){
        return times.currentAvg12();
    }

    public String bestAvg12(){
        return times.bestAvg12();
    }
    public String currentAvg100(){
        return times.currentAvg5();
    }

    public String bestAvg100(){
        return times.bestAvg5();
    }

    private String getScramblesForPositions(String positionList) {
        String[] positions = positionList.split(",");
        int intPosition=0;
        for (String position : positions) {
            intPosition=Integer.parseInt(position);
        }
        return scrambles.getScramble(intPosition);
    }

    private String printScrambles(String avgPositions) {
        int i = 1;
        String[] positions = avgPositions.split(",");
        List<String> scrambleList = new LinkedList<>();
        Times smallTimesList = new Times();
        for (String position : positions){
            smallTimesList.addTime(times.getTime(Integer.parseInt(position)));
        }
        String min=smallTimesList.minTime();
        String max=smallTimesList.maxTime();
        for (String position : positions) {
            StringBuilder sb = new StringBuilder();
            sb.append(i);
            sb.append(". ");
            if(times.getTime(Integer.parseInt(position)).equals(min) || times.getTime(Integer.parseInt(position)).equals(max)){
                sb.append("(");
            }
            sb.append(times.getTime(Integer.parseInt(position)));
            if(times.getTime(Integer.parseInt(position)).equals(min) || times.getTime(Integer.parseInt(position)).equals(max)){
                sb.append(")");
            }
            sb.append(" : ");
            sb.append(scrambles.getScramble(Integer.parseInt(position)));
            scrambleList.add(sb.toString());
            i = i + 1;
        }
        StringBuilder scrambleBuilder = new StringBuilder();
        for (String scramble : scrambleList) {
            scrambleBuilder.append(scramble);
            scrambleBuilder.append("\n");
        }
        return scrambleBuilder.toString();
    }

    public void updateMinScramble() {
        if (times.getSize() >0) {
        StringBuilder sb = new StringBuilder();
        sb.append("Generated by SCTimer");
        sb.append("\n");
        sb.append("Best single time: ");
        sb.append(times.minTime());
        sb.append("\n");
        sb.append(times.minTime());
        sb.append(" : ");
        sb.append(getScramblesForPositions(times.getMinPosition()));
        minScramble=sb.toString();
        } else {
            minScramble="Not enough times";
        }
    }

    public void updateAvg5Scrambles() {
        if (times.getSize() >=5) {
        StringBuilder sb = new StringBuilder();
        sb.append("Generated by SCTimer");
        sb.append("\n");
        sb.append("Best average of 5 times: ");
        sb.append(times.bestAvg5());
        sb.append("\n");
        sb.append(printScrambles(times.getBestAvg5Positions()));
        avg5Scrambles=sb.toString();
        } else {
            avg5Scrambles="Not enough times";
        }

    }

    public void updateAvg12Scrambles() {
        if (times.getSize() >=12) {
        StringBuilder sb = new StringBuilder();
        sb.append("Generated by SCTimer");
        sb.append("\n");
        sb.append("Best average of 12 times: ");
        sb.append(times.bestAvg12());
        sb.append("\n");
        sb.append(printScrambles(times.getBestAvg12Positions()));
        avg12Scrambles=sb.toString();
        } else {
            avg12Scrambles="Not enough times";
        }
    }

    public void storeScramblesAndTImes() throws IOException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmmss");
        Date resultDate = new Date(System.currentTimeMillis());
        String filename = "SCTimerResults" + sdf.format(resultDate) + ".txt";
        Path path = Paths.get(filename);
        BufferedWriter bw = Files.newBufferedWriter(path);
        try {
            for (int i=0;i<times.getSize();i++) {
                bw.write(String.format("%d\t%s\t%s",
                        i,
                        times.getTime(i),
                        scrambles.getScramble(i)));
                bw.newLine();
            }
        } finally {
            if (bw != null) {
                bw.close();
            }
        }
    }
}
